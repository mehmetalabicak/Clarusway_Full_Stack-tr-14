console.log("cosola baÄŸlandÄ±k")

//! Atama OperatÃ¶rÃ¼, Aritmetiksel OperatÃ¶rler,ArtÄ±rma ve Azaltma OperatÃ¶rÃ¼, KarÅŸÄ±laÅŸtÄ±rma OperatÃ¶rleri ve Logical(MantÄ±ksal) OperatÃ¶rler
var deneme = 5
varDeneme = 6

let myVar =5

const myVar1 = 6

//+ Aritmetiksel OperatÃ¶rler

// +,-,*,/,%



//! + operatÃ¶rÃ¼

const num1 =10 
const num2 = 69
const toplam = num1 + num2   // num1 ve num2 operand , + operator olarak adlandÄ±rÄ±lÄ±yor.
console.log(toplam);




const msg1 ="hello"
const msg2 = "world"
const mesaj = msg1 +msg2
console.log(mesaj);             //helloworld



const firstName = "Mehmet"
const lastName = "AlabÄ±Ã§ak"

console.log(firstName , lastName);      //Mehmet AlabÄ±Ã§ak

const name = firstName + " " + lastName
  
console.log(name);           //Mehmet AlabÄ±Ã§ak



const motherName = "Necla"
const fatherName = "Hulki"
console.log(motherName, fatherName);  //Necla Hulki





const num3 = "6";
const num4 = "7"

console.log(num3 +num4);          //67
console.log(num3 + 7);            //67
console.log(6 + 7);               //13
console.log(6 + num4);            //67  + operatorunde string deÄŸiÅŸken Ã¼stÃ¼n gelir ve dÃ¶nmÃ¼ÅŸÃ¼mÃ¼ stringe yapar
console.log(7 + num3);            //76  + operatorunde string deÄŸiÅŸken Ã¼stÃ¼n gelir ve dÃ¶nmÃ¼ÅŸÃ¼mÃ¼ stringe yapar

console.log(typeof (7 + num3));   //string







        //! Template Literals (Es6 ile gelen bir Ã¶zellik)

        //  `merhaba`  `${deÄŸiÅŸken} ${deÄŸiÅŸken2}`

        // const name2 = `${firstName} ${lastName}`
        // console.log(name2); 
        // `merhaba` hem string tanÄ±mlamasÄ± yapabiliriz hem de string iÃ§inde deÄŸiÅŸkenlerimizi `${deÄŸiÅŸken}` ÅŸeklinde yazabiliriz. + yerine daha dinamik bir ÅŸekilde stringlerimizi concatenate edebiliriz.



        //! - operatoru

        const x = 55;
        const y = 44;

        console.log(x-y);            //11

        const myNum = "10"

        console.log(x-myNum);        //45

        const yourNum = "one"

        console.log(x-yourNum);     //Nan   (// //? String ifadeyi number a dÃ¶nÃ¼ÅŸtÃ¼rmeye Ã§alÄ±ÅŸÄ±yor ama bu mÃ¼mkÃ¼n olmadÄ±ÄŸÄ± iÃ§in dÃ¶nÃ¼ÅŸtÃ¼remiyor ve bu nedenle iÅŸlemin sonucunu NaN dÃ¶ndÃ¼rÃ¼yor.matematiksel olarak belirsiz veya tanÄ±msÄ±z bir deÄŸeri temsil eder.)


        //! * operatoru
 
        let carp1=7;
        let carp2=9;
        console.log(carp1*carp2);    //63
        console.log(7*9);           //63

            console.log("a" * "b");     //NaN
        console.log("a" *3);        //NaN


        console.log("5" * "9");     //45    karakterler numeric ise number gibi davranÄ±p iÅŸlemi gerÃ§ekleÅŸtiriyor
        console.log(typeof("5" * "9"));    //number


        //!  / operatoru
        const bol1 = 81;
        const bol2 = 9;

        console.log(bol1 / bol2);               //9
        console.log(bol1 / "9");                //9
        console.log("81" / "9");                //9
        console.log(bol1 / "dokuz");            //NaN
        console.log(bol2 / 0);                  //infinity
        console.log(-81 / 0);                   // - infinity

        // //? JavaScript ile sonsuzluk-sÄ±nÄ±r deÄŸerini ifade etmek iÃ§in Infinity veya -Infinity anahtar kelimesi kullanÄ±lÄ±r. Bir sayÄ±nÄ±n 0'a bÃ¶lÃ¼nmesi Infinity veya â€“Infinity deÄŸeri dÃ¶ndÃ¼rÃ¼r.

        console.log(0 / 5);                     // 0
        console.log(0 / -5);                     // -0

        console.log(57 / 9);                    // 6,3333333







        //! % (Mod Alma) operatÃ¶rÃ¼ (BÃ¶lmedeki kalan sayÄ±yÄ± bulur)

        const mod1 = 57;
        const mod2 = 9;

        console.log(mod1 % mod2);               // 3    (bÃ¶lme operaoru gibi davranÄ±yor ama bize kalan deÄŸeri veriyor)

        console.log(22 % 7);                    // 1



        const benimSayim = 967;

        // const birlerBas = benimSayim / 100;
        const birlerBas = benimSayim % 10; // 7
         console.log(birlerBas);
        //  const onlarBas = benimSayim % 100;
        const onlarBas = (benimSayim % 100) / 10; // 6.7
        console.log(onlarBas);
        const yÃ¼zlerBas = benimSayim / 100; // 9.67
        console.log(yÃ¼zlerBas);


        // //?Bazi hazÄ±r fonksiyonlar

        //  Math.floor();  //* her zaman en yakin alt tam sayiya yuvarlar
        //  Math.ceil();  //* her zaman en yakin ust tam sayiya yuvarlar
        //  Math.trunc(); //* sayinin tam kismini alir.
        //  Math.round(); //* en yakin tam sayiya yuvarlar.
        //  Math.random(); //* 0 ve 1 arasÄ±nda rasgele sayi uretir.
        //  toFixed(basamakSayÄ±sÄ±): // . dan sonra parantezin iÃ§ine verdiÄŸimiz sayÄ± kadar basamak alÄ±r. EÄŸer noktadan sonraki basamak sayÄ±sÄ±             iÃ§ine       verdiÄŸimiz sayÄ±dan bÃ¼yÃ¼kse sondaki rakamÄ± bir artÄ±rÄ±r.

        // console.log( `YÃ¼zlerBas: ${Math.trunc(yÃ¼zlerBas)}, 
        // OnlarBas: ${Math.trunc( onlarBas)}, birlerbas : ${birlerBas}`)  // YÃ¼zlerBas: 9, OnlarBas: 6, birlerbas : 7


        //     const hazirSayi = 56.788888;

        // console.log(`hazirSayi of Circle: ${hazirSayi.toFixed(3)} `); // 56.789
        // console.log(`hazirSayi of Circle: ${Math.floor(hazirSayi)} `); // 56
        // console.log(`hazirSayi of Circle: ${Math.ceil(hazirSayi)} `);   //57
        // console.log(`hazirSayi of Circle: ${Math.trunc(hazirSayi)} `);  // 56
        //  console.log(`hazirSayi of Circle: ${Math.round(hazirSayi)} `);  //57

        // const randomNum = Math.random();
        //  console.log(randomNum);

        // const randomNum2 = Math.random() * 10;
        // console.log(randomNum2);
        // console.log(Math.round(Math.random() * 10));



        //! **(Ã¼s alma operatoru)

        const Ã¼s1 = 5;
        const Ã¼s2 = 3;
        console.log(Ã¼s1 ** Ã¼s2);      // 8



        // Dairenin alanÄ±, pi Ã§arpÄ± yarÄ±Ã§apÄ±n karesidir (A = Ï€ rÂ²).

        const pi = 3.14
        const yariCap = 9

        const alan = pi * yariCap ** 2      // 3.14 * 81 
        console.log(alan)                   //254,34




        //! ðŸ”¥ðŸ”¥ðŸ”¥              ArtÄ±rma ve Eksiltme OperatÃ¶rleri


        //? ++ ve -- operatÃ¶rleri 1 artÄ±rÄ±r veya 1 eksiltir

        //sonrasÄ± artÄ±rma ve eksiltme

        
        let number1 = 6;
       // let numberNew = number1 // 6
       // number1= number1 +1// 7
        let number1New = number1++; // Ã¶nce atadÄ± sonrasÄ±nda number1 deÄŸiÅŸkenini 1 artÄ±rdÄ±
        
        console.log(number1New); // 6
        console.log(number1); // 7
        
        let newSayi = ++number1; // Ã¶nce artÄ±r sonra ata
        console.log(newSayi); //8
        console.log(--newSayi); // 7
        console.log(newSayi--); // 7



        // //! ðŸ”¥ðŸ”¥ðŸ”¥              Atama OperatÃ¶rleri


        //!     +=ekle ve sonucu ata

        let nums1 = 14;
        let nums2 = 17;
        // nums2=nums2 + nums1; 
        nums2+= nums1;   
        //? yukarÄ±daki gibi uzun uzun yazmak yerine += operatÃ¶rÃ¼nÃ¼ kullanarak iÅŸlemimi kÄ±saltmÄ±ÅŸ oldum. AynÄ± ÅŸekilde diÄŸer operatÃ¶rler iÃ§inde geÃ§erli.

        console.log(nums2); //31


        let num14 = 6
        let num15 = 3

        // //! -= Ã‡Ä±kar ve Sonucu Ata
        num14 = num14 - num15;
        num14 -= num15;
        console.log(num14); // 3

        // //! *= Ã‡arp ve Sonucu Ata
        num14 = num14 * num15;
        num14 *= num15
        console.log(num14) //18
        
        
        //! /= BÃ¶l ve Sonucu Ata
         num14 = num14 / num15;
        num14 /= num15;
        console.log(num14);


        // //! /= BÃ¶lÃ¼mden KalanÄ± Bul ve Ata
        num14 = num14 % num15;
        num14 %= num15;
        console.log(num14);



        // //! **= Ãœs Al ve Sonucu Ata
        num14 = num14 ** num15;
        num14 **= num15;
        console.log(num14);



        // //! ðŸ”¥ðŸ”¥ðŸ”¥              KarÅŸÄ±laÅŸtÄ±rma OperatÃ¶rleri

        //?    == (eÅŸit mi)    ===(eÅŸit ve tÃ¼rleri aynÄ± mÄ±)
        
        
        const num16 = 27
        console.log(num16==27);      // true
        console.log(num16=="27");   //true
        // //? == (eÅŸitlik operatÃ¶rÃ¼), iki deÄŸeri karÅŸÄ±laÅŸtÄ±rÄ±rken tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yapar. EÄŸer karÅŸÄ±laÅŸtÄ±rÄ±lan deÄŸerler farklÄ± tiplerde ise, JavaScript otomatik olarak bu deÄŸerleri aynÄ± tipe dÃ¶nÃ¼ÅŸtÃ¼rerek karÅŸÄ±laÅŸtÄ±rma yapar. Bu iÅŸlem sÄ±rasÄ±nda, deÄŸerler eÅŸitlenebilir bir forma getirilir ve ardÄ±ndan karÅŸÄ±laÅŸtÄ±rÄ±lÄ±r.


        console.log(num16===27);        //true
        console.log(num16==="27");      // false
        //? === operatÃ¶rÃ¼ otomatik tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yapmadÄ±ÄŸÄ±ndan dolayÄ±, farklÄ± tiplerdeki deÄŸerleri eÅŸit olarak kabul etmez.tip ve deÄŸer aynÄ± mÄ± diye sorgular.

        
        
        // const user1 =prompt("lÃ¼tfen bir sayÄ± giriniz");
        // const user2 =prompt("lÃ¼tfen bir sayÄ± giriniz");

        // console.log(user1);
        // console.log(user2);




        console.log(true == 1); //true
        console.log(null == undefined);   // true
        // true boolean deÄŸeri 1 sayÄ±sÄ± ile eÅŸit kabul edilir, null ve undefined ise birbirine eÅŸit kabul edilir.
        console.log(true === 1); // false
        console.log(null === undefined); // false



        //?   != (eÅŸit deÄŸil mi)        !== (deÄŸerleri ve tÃ¼rleri eÅŸit deÄŸil mi)

        console.log(15 !="15");    // false    Ã§Ã¼nkÃ¼ deÄŸerleri birbirine eÅŸit
        console.log(15 !=="15");    // true    Ã§Ã¼nkÃ¼ typler eÅŸit deÄŸil.



        //?    > , < (BÃ¼yÃ¼k mÃ¼?, KÃ¼Ã§Ã¼k mÃ¼?)

        console.log(15 > 5);            //true
        console.log(15 < 5);            //false

        console.log("15" > 5);          //true
       
        console.log("a" > "b"); // false.String ifadelerde ASCII'ye gore kiyaslama yapilir.
        console.log("a".charCodeAt()); // 97
        console.log("b".charCodeAt()); // 98
        //. .charCodeAt() metodu string karakterin ASCII karÅŸÄ±lÄ±ÄŸÄ±nÄ± verir.
        console.log("a" > "A");// true



        //? >=, <= (BÃ¼yÃ¼k veya eÅŸit mi?, KÃ¼Ã§Ã¼k veya eÅŸit mi?)

        console.log(15 >= 15);  //true
        console.log(15 <= 15);  //true
        console.log(15 >= 19);  //false
        console.log("29" >= 19);  //true



        //! ðŸ”¥ðŸ”¥ðŸ”¥              MantÄ±ksal OperatÃ¶rler


        //? && and(ve)


        console.log(true && true); //true
        console.log(" "  && true);  //true
        console.log(5 && "merhaba");    // "merhaba"   5 true ifade,dÃ¶nmeye devam ediyor..."merhaba " truty ifade...son gÃ¶rdÃ¼ÄŸÃ¼ true ya da truty ifadeyi dÃ¶nÃ¼yor

        console.log(0 && "dÃ¼nya");  // 0 ilk gÃ¶rdÃ¼ÄŸÃ¼ false ya da falsy deÄŸeri gÃ¶rÃ¼yor,diÄŸerine hiÃ§ bakmÄ±yor

        console.log(5 && 0);    // 0
        console.log(true && false); // false




        //!    || (or)


        console.log(true || false);     //true
        console.log(5 || 15);           // 5
        console.log(5 || 0);            // 5
        console.log("" || "merhaba");   // "merhaba"
        console.log("" || 0);           // 0

        // || operatoru true ve truthy deÄŸer arar. ilk gÃ¶rdÃ¼ÄŸÃ¼ true veya truthy dÃ¶ner.Bulamazsa son gÃ¶rdÃ¼ÄŸÃ¼ false veya falsy deÄŸeri dÃ¶ner.




        // ! not
        console.log(!true) // false
        console.log(!false) // true
        console.log(!0) // true
        console.log(!5) // false


        
        // falsy
        console.log(Boolean(false)) // false
        console.log(Boolean(0)) // false
        console.log(Boolean(-0)) // false
        console.log(Boolean(0n)) // false
        console.log(Boolean("")) // false (boÅŸ string)
        console.log(Boolean(null)) // false
        console.log(Boolean(undefined)) // false
        console.log(Boolean(NaN)) // false

        // truthy
        console.log(Boolean(true)) // true
        console.log(Boolean({})) // true (boÅŸ object)
        console.log(Boolean([])) // true (boÅŸ array)
        console.log(Boolean(5)) // true
        console.log(Boolean("0")) // true (dolu string)
        console.log(Boolean("false")) // true (dolu string)
        console.log(Boolean(Infinity)) // true
        console.log(Boolean(new Date())) // true (tarih methodlarÄ±)
        console.log(Boolean(function () {})) // true (boÅŸ fonksiyon)
        console.log(Boolean(function () {console.log("Hello World!")})) // true (boÅŸ fonksiyon)


        // //! Ä°ÅŸlem Ã–nceliÄŸi sÄ±ralamasÄ±
        // 1. ! (not)
        // 2. && (and)
        // 3. || (or)
        const karÅŸilaÅŸtÄ±rma = ("merhaba" && "dÃ¼nya") || false || (28 && 67 && !0)
        console.log(karÅŸilaÅŸtÄ±rma) // dÃ¼nya



        // //* kullanÄ±cÄ±dan vize ve final notunu prompt olarak alÄ±n. sabit bir canEgrisi(ortalama) belirleyiniz.
// //!KullanÄ±cÄ±nÄ±n vize ve final ortalamasÄ± canEgrisine eÅŸit veya bÃ¼yÃ¼kse KullanÄ±cÄ±ya "GeÃ§tiniz" mesajÄ± dÃ¶nÃ¼nÃ¼z. EÅŸit veya bÃ¼yÃ¼k deÄŸilse "KaldÄ±nÄ±z" ÅŸeklinde mesaj dÃ¶nÃ¼nÃ¼nÃ¼z.
// //! Not: prompt tan gelen veriler string olarak geliyor o nedenle dÃ¶nÃ¼ÅŸtÃ¼rme iÅŸlemi yapÄ±yoruz.
// let vize = Number(prompt("LÃ¼tfen vize notunuzu giriniz ?"))
// let final = Number(prompt("LÃ¼tfen final notunuzu giriniz ?"))
// let canEgrisi = 65
// let sonuc =
//   (Math.round((vize + final) / 2) >= canEgrisi && "GeÃ§tiniz!") || "KaldÄ±nÄ±z!"
// console.log(sonuc)

// * =============================================
// *            TIP DONUSUMLERI
// * =============================================

// let sayi = prompt("Bir sayi giriniz:") //? 100       //promptan girilen her deÄŸer string dir
// console.log(typeof sayi)
// let sayi2 = 10
// sayi = sayi + sayi2 //? concatination   //100+10 =110   string+string veri topladÄ±k
// console.log(sayi)



// let sayi = prompt("Bir sayi giriniz:") //? 100
// console.log(typeof sayi)
// let sayi2 = 10
// sayi = sayi + sayi2 //? concatination      
// console.log(++sayi)                 //100+10 ve 1 arttÄ±r dedik ama sonuÃ§ 111 deÄŸil 10011 olur Ã§Ã¼nkÃ¼ number hale getiriyor



// let sayi = Number (prompt("Bir sayi giriniz:")) //? 100
// console.log(typeof sayi)                       // type de artÄ±k string deÄŸil number oldu
// let sayi2 = 10
// sayi = sayi + sayi2 //? concatination      
// console.log(++sayi)                         //bu sefer 111 cÄ±ktÄ±,Ã§Ã¼nkÃ¼ Number fonksiyounu kullandÄ±k ve bu Number deÄŸer cÄ±kardÄ± sonucu


console.log(Number("123"));                  //? 123 string girip Number olarak Ã§Ä±kÄ±yor
// console.log(Number("123")) //? 123
// console.log(Number("12.3")) //? 12.3
// console.log(Number("0")) //? 0
// console.log(Number(" ")) //? 0               //string iÃ§inde space -boÅŸluk bÄ±rakÄ±nca da yine sonuÃ§ 0
// console.log(Number("")) //? 0                //string iÃ§inde space -boÅŸluk bÄ±rakmayÄ±nca da yine sonuÃ§ 0
// console.log(Number(null)) //? 0              //string iÃ§inde null yazÄ±nca da  yine sonuÃ§ 0
// console.log(Number(undefined)) //? NaN       

// const myNumber = "threezeroone" 
// console.log(myNumber) //? NaN     string rakam formatÄ±nda yazÄ±lmadÄ±ÄŸÄ± iÃ§in sonucu NaN cÄ±kar.
// let myNumber2 = Number(myNumber)
// console.log(myNumber2) //? NaN
// console.log(typeof myNumber2) //? number

// const dolar = "1000.3"
// const tl = "2000.2"

// const totalMoney = Number(dolar) + +tl
// console.log(totalMoney)

// //* ALternatif olarak parseInt() ve parseFloat() da kullanilabilir.
// const dolarInt = parseInt(dolar) //? tamsayiya cevirir
// console.log(dolarInt)
// const tlFloat = parseFloat(tl) //? virgÃ¼llÃ¼ sayiya Ã§evirir
// console.log(tlFloat)

// console.log(parseFloat(null)) //? NaN
// console.log(parseFloat("")) //? NaN
// console.log(parseFloat(undefined)) //? NaN

// //? String
// const myNumber3 = 2000.5
// console.log(String(myNumber3))